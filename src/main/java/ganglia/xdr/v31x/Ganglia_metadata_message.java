/*
 * Automatically generated by jrpcgen 1.0.5 on 10/23/08 8:11 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package ganglia.xdr.v31x;
import org.acplt.oncrpc.*;
import java.io.IOException;

public class Ganglia_metadata_message implements XdrAble {
    public String type;
    public String name;
    public String units;
    public int slope;
    public int tmax;
    public int dmax;
    public Ganglia_extra_data [] metadata;

    public Ganglia_metadata_message() {
    }

    public Ganglia_metadata_message(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        xdrDecode(xdr);
    }

    public void xdrEncode(XdrEncodingStream xdr)
           throws OncRpcException, IOException {
        xdr.xdrEncodeString(type);
        xdr.xdrEncodeString(name);
        xdr.xdrEncodeString(units);
        xdr.xdrEncodeInt(slope);
        xdr.xdrEncodeInt(tmax);
        xdr.xdrEncodeInt(dmax);
        { int $size = metadata.length; xdr.xdrEncodeInt($size); for ( int $idx = 0; $idx < $size; ++$idx ) { metadata[$idx].xdrEncode(xdr); } }
    }

    public void xdrDecode(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        type = xdr.xdrDecodeString();
        name = xdr.xdrDecodeString();
        units = xdr.xdrDecodeString();
        slope = xdr.xdrDecodeInt();
        tmax = xdr.xdrDecodeInt();
        dmax = xdr.xdrDecodeInt();
        { int $size = xdr.xdrDecodeInt(); metadata = new Ganglia_extra_data[$size]; for ( int $idx = 0; $idx < $size; ++$idx ) { metadata[$idx] = new Ganglia_extra_data(xdr); } }
    }

}
// End of Ganglia_metadata_message.java
